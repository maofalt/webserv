# To-Do List for Project: HTTP Server (webserv)
# ------------------

# 1. Initial Setup:
- [✓] Setup project directory and initialize main executable `./webserv`.
- [✓] Create Makefile with targets: NAME, all, clean, fclean, re.
- [✓] Define and structure files: `*.{h, hpp}, *.cpp, *.tpp, *.ipp`.

# 2. Implement Core Functions:
- [ ] Implement socket handling:
    - [✓] Create socket using `socket()`.
    - [✓] Bind the socket using `bind()`.
    - [✓] Listen for connections using `listen()`.
    - [✓] Accept connections using `accept()`.
- [ ] Implement non-blocking functionality, (right now blocking):
    - [ ] Use `poll()`, `select()`, `kqueue()`, or `epoll()` as equivalent.
    - [ ] Ensure read and write operations are non-blocking.
    - [ ] Timeout function -> ? close client ?;
- [ ] Implement error handling:
    - [ ] Handle errors without checking the value of `errno` (? need to verify this, subject unclear).
- [ ] Implement HTTP methods:
    - [✓] GET
        - [ ] Include routing and file search logic.
    - [ ] POST
        - [ ] Enable file upload functionality.
    - [ ] DELETE
        - [ ] Implement file or resource deletion logic.
- [ ] Implement HTTP headers:
    - [ ] Handle headers for GET, POST, and DELETE.
    - [ ] Handle headers for CGI.
    - [ ] Handle headers for redirection.
    - [ ] Handle headers for directory listing.
    - [ ] Handle headers for file upload.
- [ ] Implement HTTP responses:
    - [ ] Handle responses for GET, POST, and DELETE.
    - [ ] Handle responses for CGI.
    - [ ] Handle responses for redirection.
    - [ ] Handle responses for directory listing.
    - [ ] Handle responses for file upload.
- [ ] Implement a way to safe exit the server through ;
    - [ ] SIGINT
    - [ ] SIGTERM

# 3. Configure Server Settings:
- [ ] Implement configuration file parsing:
    - [ ] Allow customization for port, host, server names, etc.
    - [ ] Setup default error pages.
    - [ ] Limit client body size.
    - [ ] Define routing rules including HTTP methods, redirection, directory listing, etc.

# 4. Implement CGI Functionality:
- [ ] Execute CGI based on file extensions:
    - [ ] Handle chunked requests and responses.
    - [ ] Ensure the correct directory for relative path file access.
    - [ ] Support multiple CGIs like php-CGI, Python, etc.
- [ ] Research and consider alternative methods for executing CGI.

# 5. Server Features:
- [ ] Enable directory listing control.
- [ ] Implement client file upload functionality:
    - [ ] Configure file save locations.
- [ ] Serve fully static websites.
- [ ] Implement cookies and session management:
    - [ ] Prepare quick examples for demonstration.
- [ ] Add support for HTTP redirection.

# 6. Testing and Quality Assurance:
- [ ] Validate tester functionality and create custom tests:
    - [ ] If launched several times, second and subsequent launches 
        segfaults.
    - [ ] Conduct stress tests for server availability.
    - [ ] Compare with NGINX for header and answer behaviors.
    - [ ] Ensure compatibility with different browsers.
    - [ ] Write additional tests in Python, Golang, or C++.
    - [ ] Validate security against vulnerabilities like `addrinfo`.
- [ ] Ensure server resilience and never-die behavior.

# 7. Finalization:
- [ ] Prepare and include configuration files and basic files for evaluation:
    - [ ] Review and optimize code.
    - [ ] Compile documentation or user guide if required.
