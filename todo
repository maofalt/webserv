# To-Do List for Project: HTTP Server (webserv)
# ------------------

# 1. Initial Setup:
- [✓] Setup project directory and initialize main executable `./webserv`.
- [✓] Create Makefile with targets: NAME, all, clean, fclean, re.
- [✓] Define and structure files: `*.{h, hpp}, *.cpp, *.tpp, *.ipp`.

# 2. Implement Core Functions:
- [✓] Implement socket handling:
    - [✓] Create socket using `socket()`.
    - [✓] Bind the socket using `bind()`.
    - [✓] Listen for connections using `listen()`.
    - [✓] Accept connections using `accept()`.
- [ ] Implement non-blocking functionality, (right now blocking):
    - [✓] Use `poll()`, `select()`, `kqueue()`, or `epoll()` as equivalent.
    - [✓] Ensure read and write operations are non-blocking.
    - [ ] Timeout function -> ? close client ?;
- [ ] Implement error handling:
    - [ ] Handle errors without checking the value of `errno` (? need to verify this, subject unclear).
- [ ] Implement HTTP methods:
    - [✓] GET
        - [ ] Include routing and file search logic.
    - [ ] POST
        - [ ] Enable file upload functionality.
    - [ ] DELETE
        - [ ] Implement file or resource deletion logic.
- [ ] Implement HTTP headers:
    - [ ] Handle headers for GET, POST, and DELETE.
    - [ ] Handle headers for CGI.
    - [ ] Handle headers for redirection.
    - [ ] Handle headers for directory listing.
    - [ ] Handle headers for file upload.
- [ ] Implement HTTP responses:
    - [ ] Handle responses for GET, POST, and DELETE.
    - [ ] Handle responses for CGI.
    - [ ] Handle responses for redirection.
    - [ ] Handle responses for directory listing.
    - [ ] Handle responses for file upload.
- [✓] Implement a way to safe exit the server through ;
    - [✓] SIGINT
    - [ ] SIGTERM

# 3. Configure Server Settings:
- [ ] Implement configuration file parsing:
    - [✓] Parse configuration file.
    - [✓] Handle errors.
    - [ ] Allow customization for port, host, server names, etc.
    - [ ] Setup default error pages.
    - [ ] Limit client body size.
    - [ ] Define routing rules including HTTP methods, redirection, directory listing, etc.

# 4. Implement CGI Functionality:
- [ ] Execute CGI based on file extensions:
    - [ ] Handle chunked requests and responses.
    - [ ] Ensure the correct directory for relative path file access.
    - [ ] Support multiple CGIs like php-CGI, Python, etc.
- [ ] Research and consider alternative methods for executing CGI.

# 5. Server Features:
- [ ] Enable directory listing control.
- [ ] Implement client file upload functionality:
    - [ ] Configure file save locations.
- [ ] Serve fully static websites.
- [ ] Implement cookies and session management:
    - [ ] Prepare quick examples for demonstration.
- [ ] Add support for HTTP redirection.

# 6. Testing and Quality Assurance:
- [ ] install Brew, Siege, Nginx, and Apache for testing.
- [ ] Create a sript that use Siege 
    - [ ] Baseline Tests
        Purpose: Establish a baseline for future tests.
        siege http://localhost:PORT/
    - [ ] Stress Tests
        Purpose: Identify the server's upper limits and see how it performs under extreme conditions
    - [ ] Endurance Tests
        Purpose: Check for memory leaks, and see how the server performs over an extended period.
    - [ ] Performance Tests
        Purpose: Measure the server's response times and throughput.
    - [ ] Concurrence Tests
        Purpose: Understand how many simultaneous users your server can handle.
    - [ ] Transacation Tests
         Purpose: Test multiple URLs in sequence, simulating a user journey through the site.
        Create a file named transaction.txt with:
        http://localhost:PORT/login
        http://localhost:PORT/dashboard
        http://localhost:PORT/logout
    - [ ] Content Tests
        Purpose: Ensure various types of content (HTML, images, videos, etc.) are served correctly.
    - [ ] Failover Tests
        Purpose: Check how the system behaves when one component fails or when there's a network interruption.
    - [ ] Connecton Delay Tests
        Purpose: Check how your server behaves when clients take longer to read data.

- [ ] Validate tester functionality and create custom tests:
    - [ ] If launched several times, second and subsequent launches 
        segfaults.
    - [ ] Conduct stress tests for server availability.
    - [ ] Compare with NGINX for header and answer behaviors.
    - [ ] Ensure compatibility with different browsers.
    - [ ] Write additional tests in Python, Golang, or C++.
    - [ ] Validate security against vulnerabilities like `addrinfo`.
- [ ] Ensure server resilience and never-die behavior.

# 7. Finalization:
- [ ] Prepare and include configuration files and basic files for evaluation:
    - [ ] Review and optimize code.
    - [ ] Compile documentation or user guide if required.

# To look up:
- [ ] TIME_WAIT after closing sockets and how to work around it if necessary;


# Structure:
 -[ ] Pattern : Factory
    - Explanation : To have a separate class or method that's responsible for creating objects. Instead of calling constructors directly, we delegate the responsibility of object creation to the factory, which determines which class to instantiate based on the provided information.
- [✓] Create new classes for Factory
    - [ ] Server Class
        Manages the main loop, listens to new connections, and creates ClientHandler instances for each new connection.
    - [✓] ClientHandler
        Handles individual client connections. Reads data from the socket, uses the Factory to determine the request type, and uses HttpResponse to send responses.

- [ ] Refactor New classes for Factory
    - [✓] HTTPRequestBase
    - [ ] HTTPResponse
    - [ ] HTTPRequest Derived Classes
        - [ ] HTTPRequestGET
        - [ ] HTTPRequestPOST
        - [ ] HTTPRequestDELETE
        - [ ] Other methdos have to throw an error page ?
    - [ ] HTTP Request Factory


